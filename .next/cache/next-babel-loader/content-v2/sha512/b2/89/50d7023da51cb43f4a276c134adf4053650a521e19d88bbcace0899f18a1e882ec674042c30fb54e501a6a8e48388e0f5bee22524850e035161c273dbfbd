{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\rajni\\\\ReactJS\\\\next-starting-project\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { MongoClient, ObjectId } from 'mongodb';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 12\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://rajnishkumar:Airtel@eventsdb.f5wxu.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const collection = db.collection('meetups');\n  const meetUpsId = await collection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetUpsId.map(meetupId => ({\n      params: {\n        meetupId: meetupId._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetUpId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://rajnishkumar:Airtel@eventsdb.f5wxu.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetUpcollection = db.collection('meetups');\n  const selectedMeetup = await meetUpcollection.findOne({\n    _id: ObjectId(meetUpId)\n  });\n  client.close();\n  console.log(meetUpId);\n  return {\n    props: {\n      meetupData: {\n        image: selectedMeetup.image,\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["C:/Users/rajni/ReactJS/next-starting-project/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","MeetupDetail","MeetupDetails","props","meetupData","image","title","address","description","getStaticPaths","client","connect","db","collection","meetUpsId","find","_id","toArray","close","fallback","paths","map","meetupId","params","toString","getStaticProps","context","meetUpId","meetUpcollection","selectedMeetup","findOne","console","log","id"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AAEA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,sBAAO,QAAC,YAAD;AACC,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KADzB;AAEC,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAFzB;AAGC,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH3B;AAIC,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJ/B;AAAA;AAAA;AAAA;AAAA,UAAP;AAKH;;AAGD,OAAO,eAAeC,cAAf,GAAgC;AACnC,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CAAoB,kGAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,UAAU,GAAGD,EAAE,CAACC,UAAH,CAAc,SAAd,CAAnB;AACA,QAAMC,SAAS,GAAG,MAAMD,UAAU,CAACE,IAAX,CAAgB,EAAhB,EAAoB;AAACC,IAAAA,GAAG,EAAE;AAAN,GAApB,EAA8BC,OAA9B,EAAxB;AACAP,EAAAA,MAAM,CAACQ,KAAP;AAEA,SAAO;AACHC,IAAAA,QAAQ,EAAE,KADP;AAEHC,IAAAA,KAAK,EAAEN,SAAS,CAACO,GAAV,CAAcC,QAAQ,KAAK;AAC9BC,MAAAA,MAAM,EAAE;AACJD,QAAAA,QAAQ,EAAGA,QAAQ,CAACN,GAAV,CAAeQ,QAAf;AADN;AADsB,KAAL,CAAtB;AAFJ,GAAP;AAQH;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC1C,QAAMC,QAAQ,GAAGD,OAAO,CAACH,MAAR,CAAeD,QAAhC;AACA,QAAMZ,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CAAoB,kGAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMgB,gBAAgB,GAAGhB,EAAE,CAACC,UAAH,CAAc,SAAd,CAAzB;AAEA,QAAMgB,cAAc,GAAG,MAAMD,gBAAgB,CAACE,OAAjB,CAAyB;AAACd,IAAAA,GAAG,EAAEhB,QAAQ,CAAC2B,QAAD;AAAd,GAAzB,CAA7B;AAEAjB,EAAAA,MAAM,CAACQ,KAAP;AAEAa,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACA,SAAO;AACHxB,IAAAA,KAAK,EAAE;AACHC,MAAAA,UAAU,EAAE;AACRC,QAAAA,KAAK,EAAEwB,cAAc,CAACxB,KADd;AAER4B,QAAAA,EAAE,EAAEJ,cAAc,CAACb,GAAf,CAAmBQ,QAAnB,EAFI;AAGRlB,QAAAA,KAAK,EAAEuB,cAAc,CAACvB,KAHd;AAIRC,QAAAA,OAAO,EAAEsB,cAAc,CAACtB,OAJhB;AAKRC,QAAAA,WAAW,EAAEqB,cAAc,CAACrB;AALpB;AADT;AADJ,GAAP;AAWH;AAED,eAAeN,aAAf","sourcesContent":["import { MongoClient, ObjectId } from 'mongodb';\r\n\r\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\r\n\r\nfunction MeetupDetails(props) {\r\n    return <MeetupDetail \r\n            image={props.meetupData.image}\r\n            title={props.meetupData.title}\r\n            address={props.meetupData.address}\r\n            description={props.meetupData.description}/>\r\n}\r\n\r\n\r\nexport async function getStaticPaths() {\r\n    const client = await MongoClient.connect('mongodb+srv://rajnishkumar:Airtel@eventsdb.f5wxu.mongodb.net/meetups?retryWrites=true&w=majority');\r\n    const db = client.db();\r\n\r\n    const collection = db.collection('meetups');\r\n    const meetUpsId = await collection.find({}, {_id: 1}).toArray();\r\n    client.close();\r\n\r\n    return {\r\n        fallback: false,\r\n        paths: meetUpsId.map(meetupId => ({\r\n            params: {\r\n                meetupId: (meetupId._id).toString()\r\n            }\r\n        }))\r\n    }\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n    const meetUpId = context.params.meetupId;\r\n    const client = await MongoClient.connect('mongodb+srv://rajnishkumar:Airtel@eventsdb.f5wxu.mongodb.net/meetups?retryWrites=true&w=majority');\r\n    const db = client.db();\r\n\r\n    const meetUpcollection = db.collection('meetups');\r\n\r\n    const selectedMeetup = await meetUpcollection.findOne({_id: ObjectId(meetUpId)})\r\n\r\n    client.close();\r\n    \r\n    console.log(meetUpId);\r\n    return {\r\n        props: {\r\n            meetupData: {\r\n                image: selectedMeetup.image,\r\n                id: selectedMeetup._id.toString(),\r\n                title: selectedMeetup.title,\r\n                address: selectedMeetup.address,\r\n                description: selectedMeetup.description\r\n            }\r\n        }\r\n    }\r\n} \r\n\r\nexport default MeetupDetails;"]},"metadata":{},"sourceType":"module"}